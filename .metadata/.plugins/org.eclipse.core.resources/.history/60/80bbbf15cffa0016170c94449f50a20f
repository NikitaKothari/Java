package leetcode;

import java.util.HashMap;
import java.util.Map;

public class Test {

	static void binarySearch(int[] arr, int low, int high, int[] range, int val) {
		if (low <= high) {
			int mid = (low + high) / 2;
			if (arr[mid] > val)
				binarySearch(arr, low, mid - 1, range, val);
			else if (arr[mid] < val)
				binarySearch(arr, mid + 1, high, range, val);
			else {
				int i = mid;
				while ((i - 1) >= 0) {
					if (arr[i] == arr[i - 1])
						i--;
					else
						break;
				}
				range[0] = i;
				i = mid;
				while ((i + 1) < arr.length) {
					if (arr[i] == arr[i + 1])
						i++;
					else
						break;
				}
				range[1] = i;
			}
		} else {
			range[0] = -1;
			range[1] = -1;
		}
	}

	public double power(double x, int n) {
		if (n == 0)
			return 1;
		if (n == 1)
			return x;

		double pow = power(x, n / 2);
		if (n % 2 == 0)
			return pow * pow;
		else
			return x * pow * pow;
	}

	public double myPow(double x, int n) {
		if (n < 0)
			return 1 / power(x, n * -1);
		return power(x, n);
	}

	public static int[] searchRange(int[] nums, int target) {
		int[] range = new int[2];
		binarySearch(nums, 0, nums.length, range, target);
		return range;
	}

	public static String reverseWords(String s) {
		if (s.isEmpty() || s.length() == 1 || s.length() == 0)
			return s;
		String res = "";
		for (String str : s.split(" ")) {
			res = str + " " + res;
		}
		return res;
	}

	static public void merge(int[] nums1, int m, int[] nums2, int n) {
		int i = m - 1, j = n - 1, k = n + m - 1;
		while (i > -1 && j > -1)
			nums2[k--] = (nums2[j] > nums1[i]) ? nums2[j--] : nums1[i--];
		while (j > -1)
			nums2[k--] = nums1[j--];
	}

	static public boolean isoMorphic(String s1, String s2) {
		if (s1.length() == s2.length()) {
			HashMap<Character, Character> hash = new HashMap<>();
			for (int i = 0; i < s1.length(); i++) {
				char c1 = s1.charAt(i);
				char c2 = s2.charAt(i);
				if (hash.get(c1) == null)
					hash.put(c1, c2);
				if (hash.get(c1) != c2)
					return false;
			}
			return true;
		}
		return false;
	}

	private static Map<Integer, Integer> map = new HashMap<>();

	private static int climb(int n) {
		if (n < 0)
			return 0;
		if (n == 0 && !map.containsKey(0))
			return 0;
		else if (n == 0)
			return 1;
		if (!map.containsKey(0))
			map.put(0, 0);

		if (!map.containsKey(n)) {
			int count = climb(n - 1) + climb(n - 2) + climb(n - 3);
			map.put(n, count);
		}
		return map.get(n);
	}

	public static boolean check(String str, int index) {
		String strsub = str.substring(0, index);
		str = str.replaceAll(strsub, "");
		return str.isEmpty();
	}

	public static boolean repeatedSubstringPattern(String str) {
		if (str == null || str.isEmpty() || str.length() == 0)
			return false;
		int len = str.length();
		for (int i = 1; i <= len / 2; i++) {
			if (len % i == 0) {
				if (check(str, i))
					return true;
			}
		}
		return false;
	}

	public char findTheDifference(String s, String t) {
		if (s == null || t == null)
			return '0';
		if (s.length() + 1 == t.length()) {
			for (int i = 0; i < t.length(); i++) {
				if (!s.contains("" + t.charAt(i)))
					return t.charAt(i);
			}
		}
		return '0';
	}

	public boolean wordPattern(String pattern, String str) {
		if (str == null || pattern == null)
			return false;
		String[] strs = str.split(" ");
		Map<Character, String> hash = new HashMap<>();
		if (pattern.length() == strs.length) {
			for (int i = 0; i < pattern.length(); i++) {
				if (hash.containsKey(pattern.charAt(i))) {
					if (!strs[i].equals(hash.get(pattern.charAt(i))))
						return false;
				} else {
					hash.put(pattern.charAt(i), strs[i]);
				}
			}
			return true;
		}
		return false;
	}

	public static void main(String[] args) { //
		System.out.println(repeatedSubstringPattern("abab"));

	}

}
