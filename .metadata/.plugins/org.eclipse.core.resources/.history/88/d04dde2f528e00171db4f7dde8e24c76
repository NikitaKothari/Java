package sorting.searching;

public class MergeSort {

	static <T extends Comparable<? super T>> void mergeSort(T[] arr) {

	}

	void sort(int nums[], int low, int high) {
		if (low < high) {
			// Find the middle point
			int m = (low + high) / 2;

			// Sort first and second halves
			sort(nums, low, m);
			sort(nums, m + 1, high);

			// Merge the sorted halves
			merge(nums, low, m, high);
		}
	}

	void merge(int nums[], int low, int mid, int high) {

		int n1 = mid - low + 1;
		int n2 = high - mid;

		int L[] = new int[n1];
		int R[] = new int[n2];

		for (int i = 0; i < n1; ++i)
			L[i] = nums[low + i];
		for (int j = 0; j < n2; ++j)
			R[j] = nums[mid + 1 + j];

		int i = 0, j = 0;

		int k = low;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				nums[k] = L[i];
				i++;
			} else {
				nums[k] = R[j];
				j++;
			}
			k++;
		}

		while (i < n1) {
			nums[k] = L[i];
			i++;
			k++;
		}

		while (j < n2) {
			nums[k] = R[j];
			j++;
			k++;
		}
	}

	public static void main(String[] args) {
		int[] nums = { 4, 6, 7, 9, 1, 3 };
		MergeSort ms = new MergeSort();
		Utilities util = new Utilities();
		util.print(nums);
		ms.sort(nums, 0, nums.length - 1);
		util.print(nums);
	}

}
